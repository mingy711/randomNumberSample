# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret = "changeme"

# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.username=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=false

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false

#################### Execution Context Setup ####################

#################### Play Execution Context #####################
play {
  akka {
    akka.loggers = ["akka.event.Logging$DefaultLogger", "akka.event.slf4j.Slf4jLogger"]
    loglevel = INFO
    actor {
      default-dispatcher = {
        fork-join-executor = {
          parallelism-min = 2
          parallelism-factor = 1
          parallelism-max = 24
        }
      }
    }
  }
}

##################### Reactive Mongo Execution Context ##############

mongo-async-driver {
  akka {
    loglevel = INFO
  }
}

#################### Akka Exectuion Context ##################
akka {
  event-handlers = ["akka.event.Logging$DefaultLogger", "akka.event.slf4j.Slf4jEventHandler"]
  loglevel = INFO
  log-config-on-start = off

  actor {
    provider = "akka.actor.LocalActorRefProvider"
    guardian-supervisor-strategy = "akka.actor.DefaultSupervisorStrategy"

    adServer-global-dispatcher = {
      type = Dispatcher
      executor = fork-join-executor
      fork-join-executor {
        parallelism-min = 2
        parallelism-factor = 2
        parallelism-max = 24
      }
      # messages per actor before jumping
      throughput = 100
      mailbox-capacity = -1
      mailbox-type =""
    }

    randomService-dispatcher = {
          type = Dispatcher
          executor = fork-join-executor
          fork-join-executor {
            parallelism-min = 2
            parallelism-factor = 2
            parallelism-max = 24
          }
          # messages per actor before jumping
          throughput = 100
          mailbox-capacity = -1
          mailbox-type =""
        }
  }
}

#####################################################

randomGeneratorServiceUrl="http://www.random.org/integers/?num=1&min=1&max=10&col=1&base=10&format=plain&rnd=new"

mongodb.servers = ["localhost:27017"]
mongodb.db = "celtra"

#####################################################

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger=INFO

# Logger used by the framework:
logger.play=INFO

logger.reactivemongo=INFO

# Logger provided to your application:
logger.application=DEBUG

session.cookieName="sid"

# Default timeout for cache
cache.timeout.durationSec = 300 //default to 5 minutes (5 * 60 sec = 300 sec)

application.log.path=/log4j.xml